{
    "TypeScript Starting Point": {
        "prefix": "hf-ts",
        "body": [
            "namespace HFFormdefinition.${1:SomeNamespace} {",
            "    export function ${2:doSomethingOnChange}(value) {",
            "        console.log('value: ', value);",
            "        console.log('ctrl: ', this);",
            "    }",
            "}",
            "",
            "for (let index in HFFormdefinition.${1:SomeNamespace}) {",
            "    const exportedFunction = HFFormdefinition.${1:SomeNamespace}[index];",
            "    if (typeof exportedFunction !== 'function') {",
            "        continue;",
            "    }",
            "    WinJS.Utilities.markSupportedForProcessing(exportedFunction);",
            "}"
        ],
        "description": "Custom TypeScript starting point"
    },
    "TypeScript derived Custom Control": {
        "prefix": "hf-customcontrol",
        "body": [
            "export class ${1:DerivedCustomControl} extends HybridForms.API.UIControls.BaseControl {",
            "",
            "    constructor(element, options) {",
            "        super(element, options);",
            "    }",
            "",
            "    protected createControl(): Promise<void> {",
            "        return Promise.resolve();",
            "    }",
            "",
            "    protected registerEvents() {",
            "        ",
            "    }",
            "",
            "    public dispose() {",
            "        if (this.disposed) {",
            "            return;",
            "        }",
            "",
            "        this.disposed = true;",
            "    }",
            "}"
        ],
        "description": "TypeScript derived Custom Control"
    },
    "Get and Set values": {
        "prefix": "hf-set",
        "body": [
            "const ${1:ctrl}Id = '${2:formcontrol_id}';",
            "const ${1:ctrl} = HybridForms.API.FormControls.getCtrl(${1:ctrl}Id);",
            "${1:ctrl}.val(${3});"
        ],
        "description": "Get and set values"
    },
    "Get a Control": {
        "prefix": "hf-ctrl",
        "body": [
            "const ${1:ctrl} = HybridForms.API.FormControls.getCtrl(${2:id});"
        ],
        "description": "Get a control"
    },
    "Get a Field": {
        "prefix": "hf-field",
        "body": [
            "const ${1:field} = HybridForms.API.Fields.getById(${2:id});"
        ],
        "description": "Get a field"
    },
    "Cope with RepeatingUnits": {
        "prefix": "hf-repeating",
        "body": [
            "let postfix = '';",
            "if (HybridForms.API.RepeatingUnits.isRepeatingUnit(${1:this.element})) {",
            "    postfix = HybridForms.API.RepeatingUnits.getPostfixFieldId(${1:this.element});",
            "}"
        ],
        "description": "Get post fix of a repeating unit"
    },
    "Get current User": {
        "prefix": "hf-user",
        "body": [
            "export class User extends HybridForms.API.UIControls.BaseControl {",
            "    public userId: string;",
            "",
            "    constructor(element, options) {",
            "        super(element, options);",
            "    }",
            "",
            "    private getUserOnApp(): string {",
            "        const user = HybridForms.API.User.get();",
            "",
            "        if (user && user.displayName) {",
            "            return user.displayName;",
            "        }",
            "        return '';",
            "    }",
            "",
            "    protected createControl() {",
            "        if (HybridForms.API.RepeatingUnits.isRepeatingUnit(this.element)) {",
            "            this.userId += HybridForms.API.RepeatingUnits.getPostfixFieldId(this.element);",
            "        }",
            "",
            "        const ctrl = HybridForms.API.FormControls.getCtrl(this.userId);",
            "        if (!ctrl.val()) {",
            "            const user = this.getUserOnApp();",
            "",
            "            if (user.length) {",
            "                ctrl.val(user);",
            "            }",
            "        }",
            "        return Promise.resolve();",
            "    }",
            "}"
        ],
        "description": "Get current display name of user and write it to control by given id"
    },
    "Add field values to Signature": {
        "prefix": "hf-signer",
        "body": [
            "export function getSigner(): string {",
            "    let name = [];",
            "    let currentRU = '';",
            "    let signerParts;",
            "    let namePart;",
            "",
            "    if (!this.getSignerOptions) {",
            "        return;",
            "    }",
            "",
            "    if (HybridForms.API.RepeatingUnits.isRepeatingUnit(this.element)) {",
            "        currentRU = HybridForms.API.RepeatingUnits.getPostfixFieldId(this.element);",
            "    }",
            "",
            "    signerParts = this.getSignerOptions.split(',');",
            "    if (signerParts.length) {",
            "        signerParts.forEach(function (signingPart) {",
            "            if (currentRU) {",
            "                signingPart += currentRU;",
            "            }",
            "",
            "            namePart = HybridForms.API.Fields.getById(signingPart);",
            "            if (namePart && namePart.value) {",
            "                name.push(namePart.value);",
            "            }",
            "        });",
            "    }",
            "",
            "    return $.trim(name.join(' '));",
            "}"
        ],
        "description": "Add field values to Signature by given comma serperated ids"
    },
    "Initializr": {
        "prefix": "hf-initializr",
        "body": [
            "export class Initializr extends HybridForms.API.UIControls.BaseControl {",
            "    private onRendered: () => void;",
            "    public callback: () => void;",
            "",
            "    constructor(element, options) {",
            "        super(element, options);",
            "",
            "        if (typeof this.callback === 'function') {",
            "            this.onRendered = () => {",
            "                this.callback.call(this);",
            "            };",
            "            HybridForms.API.Page.addEventListener('rendered', this.onRendered);",
            "            HybridForms.API.Page.addEventListener('viewrendered', this.onRendered);",
            "        }",
            "    }",
            "",
            "    public dispose() {",
            "        if (this.disposed) {",
            "            return;",
            "        }",
            "",
            "        if (this.onRendered) {",
            "            HybridForms.API.Page.removeEventListener('rendered', this.onRendered);",
            "            HybridForms.API.Page.addEventListener('viewrendered', this.onRendered);",
            "        }",
            "",
            "        this.disposed = true;",
            "    }",
            "}"
        ],
        "description": "Add Initializr class to namespace"
    },
    "RepeatingInput": {
        "prefix": "hf-repeatinginput",
        "body": [
            "export class addInput extends HybridForms.API.UIControls.BaseControl {",
            "",
            "    constructor(element, options) {",
            "        super(element, options);",
            "    }",
            "",
            "    private clickEvent(event) {",
            "        let targetId = event.currentTarget.id;",
            "        let \\$block = \\$(`#\\${targetId}`).closest('.repeating-input-container');",
            "",
            "        \\$('.repeating-input.hf-hide', \\$block).first().removeClass('hf-hide');",
            "    }",
            "",
            "    private getElementId(element: HTMLElement): string {",
            "        if (this.isView) {",
            "            return element.dataset.hfId;",
            "        }",
            "        return element.id;",
            "    }",
            "",
            "    private showRepeatingInputs(\\$ct: JQuery<HTMLElement> | HTMLElement) {",
            "        \\$('.repeating-input:not(.init)', \\$ct).each((idx, element) => {",
            "            let \\$element = \\$(element);",
            "            let \\$input = \\$('.hf-formcontrol', \\$element);",
            "            let filled = false;",
            "",
            "            \\$input.each((index, el) => {",
            "                const field = HybridForms.API.Fields.getById(this.getElementId(el));",
            "                const value = field?.value;",
            "                if (value) {",
            "                    filled = true;",
            "                }",
            "            });",
            "",
            "            if (filled) {",
            "                \\$element.removeClass('hf-hide');",
            "            } else {",
            "                \\$element.addClass('hf-hide');",
            "            }",
            "        });",
            "    }",
            "",
            "    protected createView() {",
            "        const \\$ct = this.\\$element.closest('.repeating-input-container');",
            "        this.showRepeatingInputs(\\$ct);",
            "    }",
            "",
            "    protected createControl(): Promise<void> {",
            "        const currentStatus = HybridForms.API.Form.getStatus();",
            "        if (currentStatus > 1) {",
            "            this.\\$element.parents('.add-input-wrapper').addClass('hf-hide');",
            "        }",
            "",
            "        const \\$ct = this.\\$element.closest('.repeating-input-container');",
            "",
            "        this.showRepeatingInputs(\\$ct);",
            "",
            "        this.\\$element.on('click', (ev) => {",
            "            ev.stopImmediatePropagation();",
            "            ev.preventDefault();",
            "            this.clickEvent(ev);",
            "        });",
            "",
            "        return Promise.resolve();",
            "    }",
            "",
            "    public dispose() {",
            "        if (this.disposed) {",
            "            return;",
            "        }",
            "",
            "        this.\\$element.off('click');",
            "",
            "        this.disposed = true;",
            "    }",
            "}",
            "",
            "export class removeInput extends HybridForms.API.UIControls.BaseControl {",
            "",
            "    constructor(element, options) {",
            "        super(element, options);",
            "    }",
            "",
            "    private clickEvent(event) {",
            "        let targetId = event.currentTarget.id;",
            "        let \\$block = \\$(`#\\${targetId}`).closest('.repeating-input-container');",
            "        let \\$inputBlock = \\$('#' + event.currentTarget.id, \\$block).closest('.repeating-input');",
            "        let \\$input = \\$('.hf-formcontrol', \\$inputBlock);",
            "",
            "        \\$input.each((idx, element) => {",
            "            HybridForms.API.FormControls.getCtrl(element.id).val(null);",
            "        });",
            "",
            "        const \\$ruInputs = \\$('.repeating-input:not(.hf-hide)', \\$block);",
            "        \\$ruInputs.each((idx, context) => {",
            "            const \\$context = \\$(context);",
            "            const idPostfix = idx + 1;",
            "            let emptyRow = true;",
            "",
            "            const \\$formControls = \\$('.hf-formcontrol', \\$context);",
            "            \\$formControls.each((index, element) => {",
            "                if (\\$(element).hasClass('filled')) {",
            "                    emptyRow = false;",
            "                }",
            "            });",
            "",
            "            if (emptyRow && idPostfix < \\$ruInputs.length) {",
            "                \\$formControls.each((index, element) => {",
            "                    const id = element.id;",
            "                    const ctrl = HybridForms.API.FormControls.getCtrl(id);",
            "                    const nextId = id.replace(/input_(?:\\d*)/, `input_\\${idPostfix + 1}`);",
            "                    let nextCtrl = HybridForms.API.FormControls.getCtrl(nextId);",
            "",
            "                    let nextVal = nextCtrl.val();",
            "                    if (nextVal && typeof nextVal.value !== 'undefined') {",
            "                        nextVal = nextCtrl.val().value;",
            "                    }",
            "                    ctrl.val(nextVal);",
            "                    nextCtrl.val(null);",
            "",
            "                    nextCtrl = null;",
            "                });",
            "            }",
            "        });",
            "",
            "        \\$('.repeating-input:not(.hf-hide):not(.init)', \\$block).last().addClass('hf-hide');",
            "    }",
            "",
            "    protected createControl(): Promise<void> {",
            "        const currentStatus = HybridForms.API.Form.getStatus();",
            "",
            "        if (currentStatus > 1) {",
            "            this.\\$element.addClass('hf-hide');",
            "        }",
            "",
            "        this.\\$element.on('click', (ev) => {",
            "            ev.stopImmediatePropagation();",
            "            ev.preventDefault();",
            "            this.clickEvent(ev);",
            "        });",
            "",
            "        return Promise.resolve();",
            "    }",
            "",
            "    public dispose() {",
            "        if (this.disposed) {",
            "            return;",
            "        }",
            "",
            "        this.\\$element.off('click');",
            "",
            "        this.disposed = true;",
            "    }",
            "}"
        ],
        "description": "Add custom code for RepeatingInput"
    },
    "Counter": {
        "prefix": "hf-counter",
        "body": [
            "return HybridForms.API.XHR.request({",
            "    type: 'POST',",
            "    url: HybridForms.API.Activation.getUrl('~/counter/$1'),",
            "    headers: { 'Content-Type': 'application/json' },",
            "    data: JSON.stringify({",
            "        'options': {",
            "            'opt1': $2",
            "        },",
            "    }),",
            "}).then((response) => {",
            "    try {",
            "        let counter = JSON.parse(response.responseText);",
            "        $3",
            "",
            "    } catch {",
            "        return Promise.reject();",
            "    }",
            "",
            "}).catch((error) => {",
            "    HybridForms.API.Log.error('requestCounter(): failed to fetch counter.');",
            "    HybridForms.API.Log.error(error);",
            "",
            "    let message = '$4';",
            "    if (error.errorCode === 1203) {",
            "        message = '$5';",
            "    }",
            "    if (error.errorCode === 1200) {",
            "        message = '$6';",
            "    }",
            "    HybridForms.API.Messages.error(message);",
            "});"
        ],
        "description": "Add Counter request template"
    }
}
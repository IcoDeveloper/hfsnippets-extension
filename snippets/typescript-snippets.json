{
	"TypeScript Starting Point": {
		"prefix": "hf-ts",
		"body": [
            "namespace HFFormdefinition.${1:SomeNamespace} {",
                "\texport function ${2:doSomethingOnChange}(value) {",
                    "\t\tconsole.log('value: ', value);",
                    "\t\tconsole.log('ctrl: ', this);",
                "\t}",
            "}",
            "",
            "WinJS.Utilities.markSupportedForProcessing(HFFormdefinition.${1:SomeNamespace}.${2:doSomethingOnChange});"
		],
		"description": "Custom TypeScript starting point"
    },
    "TypeScript derived Custom Control": {
        "prefix": "hf-customcontrol",
		"body": [
            "export class ${1:DerivedCustomControl} extends HybridForms.API.UIControls.BaseControl {",
            "",
                "\tconstructor(element, options) {",
                    "\t\tsuper(element, options);",
                "\t}",
                "",
                "\tprotected createControl(): Promise<void> {",
                    "\t\treturn Promise.resolve();",
                "\t}",
                "",
                "\tprotected registerEvents() {",
                    "\t\t",
                "\t}",
                "",
                "\tpublic dispose() {",
                    "\t\tif (this.disposed) {",
                        "\t\t\treturn;",
                    "\t\t}",
                    "",
                    "\t\tthis.disposed = true;",
                "\t}",
            "}"
		],
		"description": "TypeScript derived Custom Control"
    },
    "Get and Set values": {
        "prefix": "hf-set",
        "body": [
            "const ${1:ctrl}Id = '${2:formcontrol_id}';",
            "const ${1:ctrl} = HybridForms.API.FormControls.getCtrl(${1:ctrl}Id);",
            "${1:ctrl}.val(${3});"
        ],
        "description": "Get and set values"
    },
    "Get a Control": {
        "prefix": "hf-ctrl",
        "body": [
            "const ${1:ctrl} = HybridForms.API.FormControls.getCtrl(${2:id});"
        ],
        "description": "Get a control"
    },
    "Get a Field": {
        "prefix": "hf-field",
        "body": [
            "const ${1:field} = HybridForms.API.Fields.getById(${2:id});"
        ],
        "description": "Get a field"
    },
    "Cope with RepeatingUnits": {
        "prefix": "hf-repeating",
        "body": [
            "let postfix = '';",
            "if (HybridForms.API.RepeatingUnits.isRepeatingUnit(${1:this.element})) {",
                "\tpostfix = HybridForms.API.RepeatingUnits.getPostfixFieldId(${1:this.element});",
            "}"
        ],
        "description": "Get post fix of a repeating unit"
    },
    "Get current User": {
        "prefix": "hf-user",
        "body": [
            "export class User extends HybridForms.API.UIControls.BaseControl {",
            "    public userId: string;",
            "",
            "    constructor(element, options) {",
            "        super(element, options);",
            "    }",
            "",
            "    private getUserOnApp(): string {",
            "        const user = HybridForms.API.User.get();",
            "",
            "        if (user && user.displayName) {",
            "            return user.displayName;",
            "        }",
            "        return '';",
            "    }",
            "",
            "    protected createControl() {",
            "        if (HybridForms.API.RepeatingUnits.isRepeatingUnit(this.element)) {",
            "            this.userId += HybridForms.API.RepeatingUnits.getPostfixFieldId(this.element);",
            "        }",
            "",
            "        const ctrl = HybridForms.API.FormControls.getCtrl(this.userId);",
            "        if (!ctrl.val()) {",
            "            const user = this.getUserOnApp();",
            "",
            "            if (user.length) {",
            "                ctrl.val(user);",
            "            }",
            "        }",
            "        return Promise.resolve();",
            "    }",
            "}"
        ],
        "description": "Get current display name of user and write it to control by given id"
    },
    "Add field values to Signature": {
        "prefix": "hf-signer",
        "body": [
            "export function getSigner(): string {",
            "    let thisCtrl = this,",
            "        name = [],",
            "        currentRU = '',",
            "        signerParts,",
            "        namePart;",
            "",
            "    if (!thisCtrl.getSignerOptions) {",
            "        return;",
            "    }",
            "",
            "    if (HybridForms.API.RepeatingUnits.isRepeatingUnit(thisCtrl.element)) {",
            "        currentRU = HybridForms.API.RepeatingUnits.getPostfixFieldId(thisCtrl.element);",
            "    }",
            "",
            "    signerParts = thisCtrl.getSignerOptions.split(',');",
            "    if (signerParts.length) {",
            "        signerParts.forEach(function (signingPart) {",
            "            if (currentRU) {",
            "                signingPart += currentRU;",
            "            }",
            "",
            "            namePart = HybridForms.API.Fields.getById(signingPart);",
            "            if (namePart && namePart.value) {",
            "                name.push(namePart.value);",
            "            }",
            "        });",
            "    }",
            "",
            "    return $.trim(name.join(' '));",
            "}"
        ],
        "description": "Add field values to Signature by given comma serperated ids"
    },
    "RepeatingInput": {
        "prefix": "hf-repeatinginput",
        "body": [
            "export class addInput extends HybridForms.API.UIControls.BaseControl {",
            "    private inputId: string;",
            "    private onRendered: () => void;",
            "    private onViewRendered: () => void;",
            "",
            "    constructor(element, options) {",
            "        super(element, options);",
            "    }",
            "",
            "    private clickEvent(event) {",
            "        let targetId = event.currentTarget.id,",
            "            $block = $(`#${targetId}`).closest('.repeating-input-container');",
            "",
            "        $('.repeating-input:hidden', $block).first().show();",
            "    }",
            "",
            "    private showRepeatingInputs($ct: JQuery<HTMLElement> | HTMLElement) {",
            "        $('.repeating-input:not(.init)', $ct).each((idx, element) => {",
            "            let $element = $(element),",
            "                $input = $('.hf-formcontrol', $element),",
            "                filled = false;",
            "            ",
            "            $input.each(function (index, el) {",
            "                const $el = $(el);",
            "                if ($el.hasClass('filled')) {",
            "                    filled = true;",
            "                }",
            "            });",
            "",
            "            if (filled) {",
            "                $element.show();",
            "            } else {",
            "                $element.hide();",
            "            }",
            "        });",
            "    }",
            "",
            "    protected createView() {",
            "        this.onViewRendered = () => {",
            "            let $ct = this.$element.closest('.repeating-input-container');",
            "            this.showRepeatingInputs($ct);",
            "        };",
            "        HybridForms.API.Page.addEventListener('viewrendered', this.onViewRendered);",
            "    }",
            "",
            "    protected createControl(): Promise<void> {",
            "        const currentStatus = HybridForms.API.Form.getStatus();",
            "",
            "        if (currentStatus === 2) {",
            "            this.$element.parents('.add-input-wrapper').addClass('hf-hide');",
            "        }",
            "        return Promise.resolve();",
            "    }",
            "",
            "    protected registerEvents() {",
            "        let $ct = this.$element.closest('.repeating-input-container');",
            "",
            "        this.onRendered = () => {",
            "            this.showRepeatingInputs($ct);",
            "",
            "            $('#' + this.inputId + 'add_input', $ct).on('click', (ev) => {",
            "                ev.stopImmediatePropagation();",
            "                ev.preventDefault();",
            "                this.clickEvent(ev);",
            "            });",
            "        };",
            "        HybridForms.API.Page.addEventListener('rendered', this.onRendered);",
            "    }",
            "",
            "    public dispose() {",
            "        if (this.disposed) {",
            "            return;",
            "        }",
            "",
            "        HybridForms.API.Page.removeEventListener('rendered', this.onRendered);",
            "        HybridForms.API.Page.removeEventListener('viewrendered', this.onViewRendered);",
            "        $('#' + this.inputId + 'add_input').off('click');",
            "",
            "        this.disposed = true;",
            "    }",
            "}",
            "",
            "export class removeInput extends HybridForms.API.UIControls.BaseControl {",
            "    private onRendered: () => void;",
            "",
            "    constructor(element, options) {",
            "        super(element, options);",
            "    }",
            "",
            "    private clickEvent(event) {",
            "        let targetId = event.currentTarget.id,",
            "            $block = $(`#${targetId}`).closest('.repeating-input-container'),",
            "            $inputBlock = $('#' + event.currentTarget.id, $block).closest('.repeating-input'),",
            "            $input = $('.hf-formcontrol', $inputBlock);",
            "",
            "        $input.each((idx, element) => {",
            "            HybridForms.API.FormControls.getCtrl(element.id).val(null);",
            "        });",
            "",
            "        const $ruInputs = $('.repeating-input:visible', $block);",
            "        $ruInputs.each((idx, context) => {",
            "            const $context = $(context);",
            "            const idPostfix = idx + 1;",
            "            let emptyRow = true;",
            "",
            "            const $formControls = $('.hf-formcontrol', $context);",
            "            $formControls.each((index, element) => {",
            "                if ($(element).hasClass('filled')) {",
            "                    emptyRow = false;",
            "                }",
            "            });",
            "",
            "            if (emptyRow && idPostfix < $ruInputs.length) {",
            "                $formControls.each((index, element) => {",
            "                    const id = element.id;",
            "                    const ctrl = HybridForms.API.FormControls.getCtrl(id);",
            "                    const nextId = id.replace(/input_(?:\\d*)/, `input_${idPostfix + 1}`);",
            "                    let nextCtrl = HybridForms.API.FormControls.getCtrl(nextId);",
            "",
            "                    let nextVal = nextCtrl.val();",
            "                    if (nextVal && typeof nextVal.value !== 'undefined') {",
            "                        nextVal = nextCtrl.val().value;",
            "                    }",
            "                    ctrl.val(nextVal);",
            "                    nextCtrl.val(null);",
            "",
            "                    nextCtrl = null;",
            "                });",
            "            }",
            "        });",
            "",
            "        $('.repeating-input:visible:not(.init)', $block).last().hide();",
            "    }",
            "",
            "    protected createControl(): Promise<void> {",
            "        const currentStatus = HybridForms.API.Form.getStatus();",
            "",
            "        if (currentStatus === 2) {",
            "            this.$element.addClass('hf-hide');",
            "        }",
            "        return Promise.resolve();",
            "    }",
            "",
            "    protected registerEvents() {",
            "        let $ct = $('.repeating-input-container');",
            "",
            "        this.onRendered = () => {",
            "            $('.remove-input', $ct).on('click', (ev) => {",
            "                ev.stopImmediatePropagation();",
            "                ev.preventDefault();",
            "                this.clickEvent(ev);",
            "            });",
            "        };",
            "        HybridForms.API.Page.addEventListener('rendered', this.onRendered);",
            "    }",
            "",
            "    public dispose() {",
            "        if (this.disposed) {",
            "            return;",
            "        }",
            "",
            "        HybridForms.API.Page.removeEventListener('rendered', this.onRendered);",
            "        $('.remove-input').off('click');",
            "",
            "        this.disposed = true;",
            "    }",
            "}"
        ],
        "description": "Add custom code for RepeatingInput"
    }
}